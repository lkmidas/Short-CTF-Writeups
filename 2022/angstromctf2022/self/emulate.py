from pwn import *

raw_code = bytes.fromhex
code = []
for i in range(0, len(raw_code), 4):
    code += [int.from_bytes(raw_code[i:i+4], "little")]
mem = [0] * 0x800 + code + [0] * 0x800

pc = 0x800
inst = mem[pc]

# Patching out the infinite loops
mem[0x813] = 0xd801a001
mem[0x816] = 0xd8019001
mem[0x819] = 0xd8018001
mem[0x81c] = 0xd8017001

while inst:

    op = (inst >> 24) & 0xff
    r1 = inst & 0xfff
    r2 = (inst >> 12) & 0xfff

    pp = 0 # 1

    if pp:
        print("{:03x}: inst = {:08x}: ".format(pc, inst), end="")

    if op == 0xd6:
        mem[r2] = mem[r1]
        if pp:
            print("MOV mem[{:03x}] -> mem[{:03x}]".format(r1, r2))
    elif op == 0xd8:
        mem[r2] = (mem[r2] & 0xff000000) | r1
        if pp:
            print("MOV {:03x} -> mem[{:03x}]".format(r1, r2))
    elif op == 0xf6:
        print(chr(mem[r2] & 0xffffff), end="")
        if pp:
            print("PUTC mem[{:03x}]".format(r2))
    elif op == 0xf7:
        mem[r2] = (mem[r2] & 0xff000000) | (ord(input()[0]) & 0xff)
        if pp:
            print("GETC mem[{:03x}]".format(r2))
    elif op == 0x18:
        mem[r2] ^= mem[r1]
        if pp:
            print("XOR mem[{:03x}] ^ mem[{:03x}] -> mem[{:03x}]".format(r2, r1, r2))
    elif op == 0x16:
        tmp1 = mem[r2]
        tmp2 = (mem[r1] + tmp1) & 0xffffff
        mem[r2] = tmp1 & 0xff000000
        mem[r2] += tmp2
        if pp:
            print("ADD mem[{:03x}] + mem[{:03x}] -> mem[{:03x}]".format(r2, r1, r2))
    elif op == 0x17:
        tmp1 = mem[r2]
        tmp2 = (tmp1 - mem[r1]) & 0xffffff
        mem[r2] = tmp1 & 0xff000000
        mem[r2] += tmp2
        if pp:
            print("SUB mem[{:03x}] - mem[{:03x}] -> mem[{:03x}]".format(r2, r1, r2))
    elif op == 0x69:
        x = 1
        if mem[r2] == 0:
            x = r1
        pc = (pc + x - 1) & 0xfff
        if pp:
            print("JZ mem[{:03x}] == 0 -> pc = pc + {:03x}".format(r2, r1))
    elif op == 0xa6:
        pc = r2
        if pp:
            print("JMP pc = {:03x}".format(r2+1))
    elif op == 0xff:
        if pp:
            print("NOP")
    else:
        print("UNKNOWN")
        break

    pc += 1
    inst = mem[pc]
    
